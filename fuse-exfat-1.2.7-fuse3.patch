--- fuse-exfat-1.2.7/configure.ac.omv~	2017-11-30 23:42:40.762919464 +0100
+++ fuse-exfat-1.2.7/configure.ac	2017-11-30 23:42:40.755919450 +0100
@@ -31,7 +31,7 @@ AC_PROG_CC_C99
 AC_PROG_RANLIB
 AM_PROG_AR
 AC_SYS_LARGEFILE
-PKG_CHECK_MODULES([FUSE], [fuse])
+PKG_CHECK_MODULES([FUSE], [fuse3])
 AC_CONFIG_HEADERS([libexfat/config.h])
 AC_CONFIG_FILES([
 	libexfat/Makefile
--- fuse-exfat-1.2.7/fuse/main.c.omv~	2017-11-30 23:43:08.713978389 +0100
+++ fuse-exfat-1.2.7/fuse/main.c	2017-12-01 00:02:07.648641126 +0100
@@ -21,7 +21,7 @@
 */
 
 #include <exfat.h>
-#define FUSE_USE_VERSION 26
+#define FUSE_USE_VERSION 30
 #include <fuse.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -58,7 +58,7 @@ static void set_node(struct fuse_file_in
 	fi->keep_cache = 1;
 }
 
-static int fuse_exfat_getattr(const char* path, struct stat* stbuf)
+static int fuse_exfat_getattr(const char* path, struct stat* stbuf, struct fuse_file_info* fi)
 {
 	struct exfat_node* node;
 	int rc;
@@ -74,7 +74,7 @@ static int fuse_exfat_getattr(const char
 	return 0;
 }
 
-static int fuse_exfat_truncate(const char* path, off_t size)
+static int fuse_exfat_truncate(const char* path, off_t size, struct fuse_file_info* fi)
 {
 	struct exfat_node* node;
 	int rc;
@@ -97,8 +97,8 @@ static int fuse_exfat_truncate(const cha
 	return rc;
 }
 
-static int fuse_exfat_readdir(const char* path, void* buffer,
-		fuse_fill_dir_t filler, off_t offset, struct fuse_file_info* fi)
+static int fuse_exfat_readdir(const char* path, void *buffer,
+		fuse_fill_dir_t filler, off_t offset, struct fuse_file_info* fi, enum fuse_readdir_flags fl)
 {
 	struct exfat_node* parent;
 	struct exfat_node* node;
@@ -118,8 +118,8 @@ static int fuse_exfat_readdir(const char
 		return -ENOTDIR;
 	}
 
-	filler(buffer, ".", NULL, 0);
-	filler(buffer, "..", NULL, 0);
+	filler(buffer, ".", NULL, 0, 0);
+	filler(buffer, "..", NULL, 0, 0);
 
 	rc = exfat_opendir(&ef, parent, &it);
 	if (rc != 0)
@@ -134,7 +134,7 @@ static int fuse_exfat_readdir(const char
 		exfat_debug("[%s] %s: %s, %"PRId64" bytes, cluster 0x%x", __func__,
 				name, node->is_contiguous ? "contiguous" : "fragmented",
 				node->size, node->start_cluster);
-		filler(buffer, name, NULL, 0);
+		filler(buffer, name, NULL, 0, 0);
 		exfat_put_node(&ef, node);
 	}
 	exfat_closedir(&ef, &it);
@@ -277,13 +277,13 @@ static int fuse_exfat_mkdir(const char*
 	return exfat_mkdir(&ef, path);
 }
 
-static int fuse_exfat_rename(const char* old_path, const char* new_path)
+static int fuse_exfat_rename(const char* old_path, const char* new_path, unsigned int flags)
 {
 	exfat_debug("[%s] %s => %s", __func__, old_path, new_path);
 	return exfat_rename(&ef, old_path, new_path);
 }
 
-static int fuse_exfat_utimens(const char* path, const struct timespec tv[2])
+static int fuse_exfat_utimens(const char* path, const struct timespec tv[2], struct fuse_file_info* fi)
 {
 	struct exfat_node* node;
 	int rc;
@@ -300,7 +300,7 @@ static int fuse_exfat_utimens(const char
 	return rc;
 }
 
-static int fuse_exfat_chmod(const char* path, mode_t mode)
+static int fuse_exfat_chmod(const char* path, mode_t mode, struct fuse_file_info* fi)
 {
 	const mode_t VALID_MODE_MASK = S_IFREG | S_IFDIR |
 			S_IRWXU | S_IRWXG | S_IRWXO;
@@ -311,7 +311,7 @@ static int fuse_exfat_chmod(const char*
 	return 0;
 }
 
-static int fuse_exfat_chown(const char* path, uid_t uid, gid_t gid)
+static int fuse_exfat_chown(const char* path, uid_t uid, gid_t gid, struct fuse_file_info* fi)
 {
 	exfat_debug("[%s] %s %u:%u", __func__, path, uid, gid);
 	if (uid != ef.uid || gid != ef.gid)
@@ -343,7 +343,7 @@ static int fuse_exfat_statfs(const char*
 	return 0;
 }
 
-static void* fuse_exfat_init(struct fuse_conn_info* fci)
+static void* fuse_exfat_init(struct fuse_conn_info* fci, struct fuse_config* cfg)
 {
 	exfat_debug("[%s]", __func__);
 #ifdef FUSE_CAP_BIG_WRITES
@@ -493,8 +493,7 @@ static char* add_fuse_options(char* opti
 
 int main(int argc, char* argv[])
 {
-	struct fuse_args mount_args = FUSE_ARGS_INIT(0, NULL);
-	struct fuse_args newfs_args = FUSE_ARGS_INIT(0, NULL);
+	struct fuse_args args = FUSE_ARGS_INIT(0, NULL);
 	const char* spec = NULL;
 	const char* mount_point = NULL;
 	char* mount_options;
@@ -570,9 +569,9 @@ int main(int argc, char* argv[])
 	}
 
 	/* create arguments for fuse_mount() */
-	if (fuse_opt_add_arg(&mount_args, "exfat") != 0 ||
-		fuse_opt_add_arg(&mount_args, "-o") != 0 ||
-		fuse_opt_add_arg(&mount_args, mount_options) != 0)
+	if (fuse_opt_add_arg(&args, "exfat") != 0 ||
+		fuse_opt_add_arg(&args, "-o") != 0 ||
+		fuse_opt_add_arg(&args, mount_options) != 0)
 	{
 		exfat_unmount(&ef);
 		free(mount_options);
@@ -581,31 +580,27 @@ int main(int argc, char* argv[])
 
 	free(mount_options);
 
-	/* create FUSE mount point */
-	fc = fuse_mount(mount_point, &mount_args);
-	fuse_opt_free_args(&mount_args);
-	if (fc == NULL)
+	/* create arguments for fuse_new() */
+	if (fuse_opt_add_arg(&args, "") != 0 ||
+		(debug && fuse_opt_add_arg(&args, "-d") != 0))
 	{
-		exfat_unmount(&ef);
 		return 1;
 	}
 
-	/* create arguments for fuse_new() */
-	if (fuse_opt_add_arg(&newfs_args, "") != 0 ||
-		(debug && fuse_opt_add_arg(&newfs_args, "-d") != 0))
+	/* create new FUSE file system */
+	fh = fuse_new(&args, &fuse_exfat_ops,
+			sizeof(struct fuse_operations), NULL);
+	fuse_opt_free_args(&args);
+	if (fh == NULL)
 	{
-		fuse_unmount(mount_point, fc);
 		exfat_unmount(&ef);
 		return 1;
 	}
 
-	/* create new FUSE file system */
-	fh = fuse_new(fc, &newfs_args, &fuse_exfat_ops,
-			sizeof(struct fuse_operations), NULL);
-	fuse_opt_free_args(&newfs_args);
-	if (fh == NULL)
+
+	/* create FUSE mount point */
+	if (fuse_mount(fh, mount_point) != 0)
 	{
-		fuse_unmount(mount_point, fc);
 		exfat_unmount(&ef);
 		return 1;
 	}
@@ -613,7 +608,7 @@ int main(int argc, char* argv[])
 	/* exit session on HUP, TERM and INT signals and ignore PIPE signal */
 	if (fuse_set_signal_handlers(fuse_get_session(fh)) != 0)
 	{
-		fuse_unmount(mount_point, fc);
+		fuse_unmount(fh);
 		fuse_destroy(fh);
 		exfat_unmount(&ef);
 		exfat_error("failed to set signal handlers");
@@ -632,7 +627,7 @@ int main(int argc, char* argv[])
 
 	fuse_remove_signal_handlers(fuse_get_session(fh));
 	/* note that fuse_unmount() must be called BEFORE fuse_destroy() */
-	fuse_unmount(mount_point, fc);
+	fuse_unmount(fh);
 	fuse_destroy(fh);
 	return 0;
 }
